import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

# Estilo de gráficos
try:
    plt.style.use('seaborn-v0_8')
except:
    plt.style.use('ggplot')

def load_data(filepath):
    try:
        return pd.read_csv(filepath)
    except Exception as e:
        print(f"Error al cargar {filepath}: {e}")
        return None

def reshape_investment_data(filepath):
    try:
        df = pd.read_csv(filepath)
        df_long = df.melt(id_vars='CountryCode', var_name='Year', value_name='Investment_Percentage')
        df_long.rename(columns={'CountryCode': 'Country'}, inplace=True)
        df_long['Year'] = df_long['Year'].astype(int)
        df_long['Investment_Percentage'] = pd.to_numeric(df_long['Investment_Percentage'], errors='coerce')
        df_long = df_long.dropna(subset=['Investment_Percentage'])
        return df_long
    except Exception as e:
        print(f"Error transformando la base de inversión: {e}")
        return None

def preprocess_data(data):
    try:
        selected_data = data[['Year', 'Percentage']].copy()
        scaler = StandardScaler()
        scaled_data = scaler.fit_transform(selected_data)
        return scaled_data, scaler
    except Exception as e:
        print(f"Error en preprocesamiento: {e}")
        return None, None

def apply_kmeans(data, n_clusters=3):
    try:
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=15)
        kmeans.fit(data)
        return kmeans
    except Exception as e:
        print(f"Error en K-Means: {e}")
        return None

def main():
    INTERNET_FILE = 'internet_access_data.csv'
    COMPUTERS_FILE = 'computer_access_data.csv'
    INVESTMENT_FILE = 'Porcentaje_inversion.csv'
    N_CLUSTERS = 3
    
    # Cargar datos
    internet_data = load_data(INTERNET_FILE)
    computer_data = load_data(COMPUTERS_FILE)
    investment_data = reshape_investment_data(INVESTMENT_FILE)
    
    # Verificación correcta
    if internet_data is None or computer_data is None or investment_data is None:
        print("Error: uno o más archivos no se pudieron cargar.")
        return

    # Preprocesamiento y clustering
    scaled_internet, scaler_internet = preprocess_data(internet_data)
    if scaled_internet is None:
        return

    kmeans = apply_kmeans(scaled_internet, N_CLUSTERS)
    if kmeans is None:
        return

    internet_data['Cluster'] = kmeans.labels_

    # Unir datos
    merged = pd.merge(
        internet_data,
        computer_data,
        on=['Country', 'Year'],
        suffixes=('_Internet', '_Computers')
    )
    merged = pd.merge(merged, investment_data, on=['Country', 'Year'])

    # ----------------------------
    # Gráfico de barras (4.1.3)
    # ----------------------------
    cluster_investment_means = merged.groupby("Cluster")["Investment_Percentage"].mean().round(2)

    plt.figure(figsize=(8, 5))
    cluster_investment_means.plot(kind='bar', color=['tab:blue', 'tab:green', 'tab:red'], edgecolor='black')

    plt.title("Promedio de Inversión Educativa por Clúster")
    plt.xlabel("Clúster")
    plt.ylabel("Inversión Educativa (% del PIB)")
    plt.xticks(rotation=0)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()

    # ----------------------------
    # Gráfico lineal doble eje Y (4.2)
    # ----------------------------
    year_means = merged.groupby('Year').agg({
        'Percentage_Internet': 'mean',
        'Percentage_Computers': 'mean',
        'Investment_Percentage': 'mean'
    }).round(2)

    fig, ax1 = plt.subplots(figsize=(12, 6))

    ax1.plot(year_means.index, year_means['Percentage_Internet'], marker='o', label='Acceso a Internet', color='tab:blue')
    ax1.plot(year_means.index, year_means['Percentage_Computers'], marker='s', label='Acceso a Computadoras', color='tab:green')
    ax1.set_xlabel('Año')
    ax1.set_ylabel('Acceso (%)', color='black')
    ax1.tick_params(axis='y', labelcolor='black')

    ax2 = ax1.twinx()
    ax2.plot(year_means.index, year_means['Investment_Percentage'], marker='^', label='Inversión Educativa', color='tab:red')
    ax2.set_ylabel('Inversión (% del PIB)', color='tab:red')
    ax2.tick_params(axis='y', labelcolor='tab:red')

    # Combinar leyendas
    lines_1, labels_1 = ax1.get_legend_handles_labels()
    lines_2, labels_2 = ax2.get_legend_handles_labels()
    ax1.legend(lines_1 + lines_2, labels_1 + labels_2, loc='upper center', ncol=3)

    plt.title('Evolución Anual: Acceso a Tecnología e Inversión Educativa')
    plt.grid(True)
    plt.xticks(year_means.index, rotation=45)
    plt.tight_layout()
    plt.show()

    print("\nProceso finalizado correctamente.")


if __name__ == "__main__":
    main()
